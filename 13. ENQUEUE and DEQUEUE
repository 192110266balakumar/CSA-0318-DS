// C# Program to implement above approach
using System;
using System.Collections.Generic;

public class GFG {

// Helper class Geeks to implement
// insert() and findFrequency()
public class Geeks {

	// Function to insert
	// element into the queue
public void insert(Queue<int> q, int k)
	{
		// adding N integers into the Queue
		q.Enqueue(k);
	}

	// Function to find frequency of an element
	// return the frequency of k
	public int findFrequency(Queue<int> q, int k)
	{
		// to count frequency of elements
		int cntFrequency = 0;

		// storing size of queue in a variable
		int size = q.Count;

		// running loop until size becomes zero
		while (size-- != 0) {

			// storing and deleting
			// first element from queue
			int x = q.Peek();
			q.Dequeue();

			// comparing if it's equal to integer K
			// that belongs to M
			if (x == k) {
				// increment count
				cntFrequency++;
			}
			// add element back to queue because
			// we also want N integers
			q.Enqueue(x);
		}
		// return the count
		return cntFrequency;
	}
}

	// Driver code
	public static void Main()
	{
	
		// Declaring Queue
		Queue<int> q = new Queue<int>();
		int N = 8;
		int[] a = new int[] { 1, 2, 3, 4, 5, 2, 3, 1 };
		int M = 5;
		int[] b = new int[] { 1, 3, 2, 9, 10 };

		// Invoking object of Geeks class
		Geeks obj = new Geeks();

		for (int i = 0; i < N; i++)
		{
		
			// calling insert()
			// to add elements in queue
			obj.insert(q, a[i]);
		}

		for (int i = 0; i < M; i++)
		{
		
			// calling findFrequency()
			int f = obj.findFrequency(q, b[i]);
			if (f != 0)
			{
			
				// variable f
				// will have final frequency
				Console.Write(f + " ");
			}
			else {
				Console.Write("-1"
								+ " ");
			}
		}
	}
}

// This code is contributed by SURENDRA_GANGWAR.

output:

2 2 2 -1 -1 
